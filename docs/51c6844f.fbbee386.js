(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{103:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(3),o=r(7),a=(r(0),r(163)),i={id:"html_reporter",title:"HTML Reporter",sidebar_label:"HTML Reporter",slug:"html_reporter.html"},s={unversionedId:"extensions/html_reporter",id:"extensions/html_reporter",isDocsHomePage:!1,title:"HTML Reporter",description:"When using JUnit XML, we can generate XML results from tests that are able to produce output with nested",source:"@site/docs/extensions/html_reporter.md",slug:"/extensions/html_reporter.html",permalink:"/docs/extensions/html_reporter.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/html_reporter.md",version:"current",sidebar_label:"HTML Reporter"},c=[],l={rightToc:c};function p(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When using ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/extensions/junit_xml.html"}),"JUnit XML"),", we can generate XML results from tests that are able to produce output with nested\ntests. Unfortunately, Gradle generates its HTML reports with the results it has in-memory, which doesn't support nested\ntests, and it doesn't seem to be able to fetch results from a different XML."),Object(a.b)("p",null,"To solve this, Kotest has a listener that is able to generate HTML reports based on the XML reports that are generated\nby ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/extensions/junit_xml.html"}),"JUnit XML"),"."),Object(a.b)("p",null,"In order to use it, we simply need to add it as a listener through ",Object(a.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/framework/project-config.html"}),"project config"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{}),"class ProjectConfig : AbstractProjectConfig() {\n\n   override val specExecutionOrder = SpecExecutionOrder.Annotated\n\n   override fun listeners(): List<Listener> {\n      return listOf(\n         JunitXmlReporter(\n            includeContainers = false,\n            useTestPathAsName = true\n         ),\n         HtmlReporter()\n      )\n   }\n}\n")),Object(a.b)("p",null,"Notice that we also add ",Object(a.b)("inlineCode",{parentName:"p"},"JunitXmlReporter"),". This will generate the necessary XML reports, used to generate the HTML reports.\nThere's no additional configuration needed, it should simply start generating HTML reports."),Object(a.b)("p",null,"By default, it stores reports in ",Object(a.b)("inlineCode",{parentName:"p"},"path/to/buildDir/reports/tests/test")," but this can be modified by changing the parameter\n",Object(a.b)("inlineCode",{parentName:"p"},"outputDir"),"."))}p.isMDXComponent=!0},163:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(r),b=n,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||a;return r?o.a.createElement(m,s(s({ref:t},l),{},{components:r})):o.a.createElement(m,s({ref:t},l))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);